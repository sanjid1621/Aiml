import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import pairwise_distances_argmin_min

class SelfOrganizingMap:
    def __init__(self, m, n, input_dim, lr=0.1, sigma=1.0):
        self.m, self.n, self.input_dim = m, n, input_dim
        self.lr, self.sigma = lr, sigma
        self.weights = np.random.rand(m * n, input_dim)
    
    def _update_weights(self, x, bmu_idx, iteration):
        lr = self.lr * (1 - iteration / self.max_iter)
        sigma = self.sigma * (1 - iteration / self.max_iter)
        bmu_row, bmu_col = np.unravel_index(bmu_idx, (self.m, self.n))
        for i in range(self.m):
            for j in range(self.n):
                dist = np.sqrt((bmu_row - i) ** 2 + (bmu_col - j) ** 2)
                if dist < sigma:
                    idx = i * self.n + j
                    influence = np.exp(-dist ** 2 / (2 * sigma ** 2))
                    self.weights[idx] += lr * influence * (x - self.weights[idx])
    
    def fit(self, X, max_iter=1000):
        self.max_iter = max_iter
        for iteration in range(max_iter):
            for x in X:
                distances = np.linalg.norm(self.weights - x, axis=1)
                bmu_idx = np.argmin(distances)
                self._update_weights(x, bmu_idx, iteration)
    
    def predict(self, X):
        return pairwise_distances_argmin_min(X, self.weights)[0]

# Generate and prepare dataset
X, _ = make_classification(n_samples=200, n_features=2, random_state=42)
X = StandardScaler().fit_transform(X)

# Initialize, train, and predict with SOM
som = SelfOrganizingMap(m=10, n=10, input_dim=X.shape[1])
som.fit(X, max_iter=1000)
cluster_assignments = som.predict(X)

# Plot results
plt.scatter(X[:, 0], X[:, 1], c=cluster_assignments, cmap='viridis')
plt.colorbar(label='Cluster')
plt.title('Self-Organizing Map Clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()
