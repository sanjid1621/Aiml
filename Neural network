import numpy as np
from sklearn.datasets import make_classification
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Activation functions
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return sigmoid(x) * (1 - sigmoid(x))

# Neural Network class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.W1 = np.random.randn(input_size, hidden_size)
        self.b1 = np.zeros((1, hidden_size))
        self.W2 = np.random.randn(hidden_size, output_size)
        self.b2 = np.zeros((1, output_size))
    
    def forward(self, X):
        self.z1 = X @ self.W1 + self.b1
        self.a1 = sigmoid(self.z1)
        self.z2 = self.a1 @ self.W2 + self.b2
        self.a2 = sigmoid(self.z2)
        return self.a2

    def backward(self, X, y, lr):
        m = y.shape[0]
        output_error = self.a2 - y
        output_delta = output_error * sigmoid_derivative(self.z2)
        hidden_error = output_delta @ self.W2.T
        hidden_delta = hidden_error * sigmoid_derivative(self.z1)

        self.W2 -= lr * (self.a1.T @ output_delta) / m
        self.b2 -= lr * np.sum(output_delta, axis=0, keepdims=True) / m
        self.W1 -= lr * (X.T @ hidden_delta) / m
        self.b1 -= lr * np.sum(hidden_delta, axis=0, keepdims=True) / m
    
    def train(self, X, y, epochs=1000, lr=0.01):
        for epoch in range(epochs):
            self.forward(X)
            self.backward(X, y, lr)
            if epoch % 100 == 0:
                loss = np.mean(np.square(y - self.a2))
                print(f'Epoch {epoch}, Loss: {loss:.4f}')
    
    def predict(self, X):
        return np.round(self.forward(X))

# Create dataset
X, y = make_classification(n_samples=1000, n_features=10, n_classes=1, random_state=42)
X = StandardScaler().fit_transform(X)
y = y.reshape(-1, 1)

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize and train the neural network
nn = NeuralNetwork(input_size=X_train.shape[1], hidden_size=5, output_size=1)
nn.train(X_train, y_train, epochs=1000, lr=0.01)

# Test the neural network
accuracy = np.mean(nn.predict(X_test) == y_test)
print(f'Test Accuracy: {accuracy * 100:.2f}%')
